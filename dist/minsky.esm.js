const empty=0,halt_node=void 0;class RegisterMachine{constructor(e,t){this.nodes=e||{},this.registers=t||{};for(let e in this.nodes){let t=this.nodes[e];if(t.registers=this.registers,t.on_increment===halt_node){if(t.on_decrement!==halt_node){if(!this.nodes.hasOwnProperty(t.on_decrement))throw new Error(`register machine does not have node named: ${t.on_decrement}`);t.on_decrement=this.nodes[t.on_decrement]}if(t.on_empty!==halt_node){if(!this.nodes.hasOwnProperty(t.on_empty))throw new Error(`register machine does not have node named: ${t.on_empty}`);t.on_empty=this.nodes[t.on_empty]}}else{if(!this.nodes.hasOwnProperty(t.on_increment))throw new Error(`register machine does not have node named: ${t.on_increment}`);t.on_increment=this.nodes[t.on_increment]}}this.start=this.nodes.start}clearRegisters(){this.registers={}}clearNodes(){this.nodes=[]}run(){this.start.updateRegister();let e=this.start.func();for(;e!==halt_node;)e=e.func()}}const decrement=function(){return this.val===empty?this.on_empty!==halt_node?this.on_empty.updateNode():halt_node:(this.val-=1,this.updateRegister(),this.on_decrement!==halt_node?this.on_decrement.updateNode():halt_node)},increment=function(){return this.val+=1,this.updateRegister(),this.on_increment!==halt_node?this.on_increment.updateNode():halt_node},updateRegister=function(){this.registers[this.register]=this.val},updateNode=function(){return void 0===this.val&&(this.val=this.registers[this.register]),this};class MinusNode{constructor({val:e,register:t,on_decrement:n,on_empty:s}={}){if(e<empty)throw new Error(`val must be greater than or equal to ${empty}`);this.register=t,this.registers=void 0,this.val=e,this.on_decrement=n,this.func=decrement,this.on_empty=s,this.updateRegister=updateRegister,this.updateNode=updateNode}isPlusNode(){return!1}isMinusNode(){return!0}}class PlusNode{constructor({val:e,register:t,on_increment:n}={}){if(e<empty)throw new Error(`val in PlusNode must be greater than or equal to ${empty}`);this.register=t,this.registers=void 0,this.val=e,this.on_increment=n,this.func=increment,this.updateRegister=updateRegister,this.updateNode=updateNode}isPlusNode(){return!0}isMinusNode(){return!1}}export{empty,halt_node,RegisterMachine,MinusNode,PlusNode};
